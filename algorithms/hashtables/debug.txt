Reading symbols from ./hashtable...
[New LWP 38623]
Core was generated by `./hashtable'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00005646e5cd3835 in insert (table=0x0, key=0x5646e5cd81a0 <KATE>, value=0x5646e5cd50b0 <KATE_NUMBER>) at open_address_table.cpp:140
140		Record* newNode = create_record(key, table->key_size, value, table->value_size);
#0  0x00005646e5cd3835 in insert (table=0x0, key=0x5646e5cd81a0 <KATE>, value=0x5646e5cd50b0 <KATE_NUMBER>) at open_address_table.cpp:140
#1  0x00005646e5cd4011 in add_to_null_table_fails () at table_tests.cpp:159
#2  0x00005646e5cd462e in insert_tests () at table_tests.cpp:304
#3  0x00005646e5cd33a7 in main () at main.cpp:9
Reading symbols from hashtable...
Breakpoint 1 at 0x22b2: file table_tests.cpp, line 205.
Starting program: /home/dic3jam/Desktop/notebook/3050-Alogorithms/12week/hashhw/hashtable 

Breakpoint 1, failed_search_fails () at table_tests.cpp:205
205	void failed_search_fails() {
206		HashTable* table = empty_table();
207		fill_table(table);
208		test_null("Failed search fails", search(table, &KATE));
search (table=0x55555556f290, key=0x7fffffffdb00) at open_address_table.cpp:168
168	void* search(const HashTable* table, const void* key) {
169		if(table == NULL)
171		if(key == NULL)
173		int i = find_bucket(table, key);
find_bucket (table=0x55555556f290, key=0x55555555a180 <NAMES+288>) at open_address_table.cpp:92
92	int find_bucket(const HashTable* table, const void* key) {
93		int attempts = 0;
94		while(attempts < table->N) {
95			int i = (table->hash_function(key) + attempts) % table->N;
96			if(table->buckets[i] == NULL) {
$1 = 6
99			if(table->buckets[i] == DELETED) {
103			if(table->compare(table->buckets[i]->key, key) == 0){
94		while(attempts < table->N) {
95			int i = (table->hash_function(key) + attempts) % table->N;
96			if(table->buckets[i] == NULL) {
99			if(table->buckets[i] == DELETED) {
103			if(table->compare(table->buckets[i]->key, key) == 0){
94		while(attempts < table->N) {
95			int i = (table->hash_function(key) + attempts) % table->N;
96			if(table->buckets[i] == NULL) {
99			if(table->buckets[i] == DELETED) {
103			if(table->compare(table->buckets[i]->key, key) == 0){
94		while(attempts < table->N) {
95			int i = (table->hash_function(key) + attempts) % table->N;
96			if(table->buckets[i] == NULL) {
99			if(table->buckets[i] == DELETED) {
103			if(table->compare(table->buckets[i]->key, key) == 0){
94		while(attempts < table->N) {
95			int i = (table->hash_function(key) + attempts) % table->N;
96			if(table->buckets[i] == NULL) {
99			if(table->buckets[i] == DELETED) {
103			if(table->compare(table->buckets[i]->key, key) == 0){
94		while(attempts < table->N) {
95			int i = (table->hash_function(key) + attempts) % table->N;
96			if(table->buckets[i] == NULL) {
99			if(table->buckets[i] == DELETED) {
103			if(table->compare(table->buckets[i]->key, key) == 0){
94		while(attempts < table->N) {
95			int i = (table->hash_function(key) + attempts) % table->N;
96			if(table->buckets[i] == NULL) {
99			if(table->buckets[i] == DELETED) {
103			if(table->compare(table->buckets[i]->key, key) == 0){
94		while(attempts < table->N) {
95			int i = (table->hash_function(key) + attempts) % table->N;
96			if(table->buckets[i] == NULL) {
$2 = 0
